{"version":3,"sources":["components/slider/axises/axises.module.scss","components/slider/bar/bar.module.scss","components/slider/slider.module.scss","components/slider/axises/axises.tsx","components/slider/bar/bar.tsx","components/slider/slider.tsx","components/app.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","getVGrid","count","className","styles","vGrid","Array","fill","map","item","index","key","vGridLine","Axises","axises","back","hGrid","hGridLine","getHGrid","Bar","percent","size","bar","style","width","left","height","front","right","projector","data","Slider","state","onNextClick","length","setState","onPrevClick","slider","arrowLeft","onClick","this","arrowRight","content","React","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55d59d73.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"axises\":\"axises_axises__lG4Hn\",\"back\":\"axises_back__XpgXZ\",\"hGrid\":\"axises_hGrid__2LZTr\",\"vGrid\":\"axises_vGrid__2rmI4\",\"hGridLine\":\"axises_hGridLine__1qrEV\",\"vGridLine\":\"axises_vGridLine__3S3rZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"bar_bar__1samM\",\"left\":\"bar_left__2cHHj\",\"right\":\"bar_right__3zg8U\",\"front\":\"bar_front__3dXni\",\"back\":\"bar_back__3r99y\",\"projector\":\"bar_projector__1EIVg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"slider_slider__3aVoJ\",\"arrow\":\"slider_arrow__2u5h2\",\"arrowLeft\":\"slider_arrowLeft__3Q24-\",\"arrowRight\":\"slider_arrowRight__1_d2a\",\"content\":\"slider_content__2IGxS\"};","import React from 'react';\nimport styles from './axises.module.scss';\n\nexport interface IAxisesProps {\n    count?: number;\n}\n\nconst getVGrid = (count: number) => (\n    <div className={styles.vGrid}>\n        {new Array(count).fill(null).map((item, index) => (\n            <div key={index} className={styles.vGridLine} />\n        ))}\n    </div>\n);\n\nconst getHGrid = (count: number) => (\n    <div className={styles.hGrid}>\n        {new Array(count).fill(null).map((item, index) => (\n            <div key={index} className={styles.hGridLine} />\n        ))}\n    </div>\n);\n\nexport const Axises = ({ count = 0 }: IAxisesProps) => (\n    <div className={styles.axises}>\n        <div className={styles.back}>\n            {getVGrid(count)}\n            {getHGrid(10)}\n        </div>\n        {getVGrid(count)}\n    </div>\n);\n","import React from 'react';\nimport styles from './bar.module.scss';\n\nexport interface IBarProps {\n    percent?: number;\n}\n\nexport const MAX_SIZE = 300;\n\nexport const Bar = ({ percent = 0 }: IBarProps) => {\n    const size = 300 * percent / 100;\n\n    return (\n        <div className={styles.bar}>\n            <div className={styles.back} style={{ width: size }} />\n            <div className={styles.left} style={{ height: size }} />\n            <div className={styles.front} style={{ width: size }} />\n            <div className={styles.right} style={{ height: size }} />\n            <div className={styles.projector} style={{ width: size }} />\n        </div>\n    );\n}\n","import React from 'react';\nimport { Axises } from './axises/axises';\nimport { Bar } from './bar/bar';\nimport styles from './slider.module.scss';\n\nconst data = [\n    [100, 80, 60, 50, 45, 40],\n    [80, 90, 50, 55, 15, 60],\n    [90, 70, 10, 0, 100, 90],\n    [10, 15, 20, 30, 50, 80],\n];\n\nexport class Slider extends React.PureComponent {\n    state = {\n        index: 0,\n    };\n\n    onNextClick = () => {\n        const index = this.state.index >= data.length - 1 ? 0 : this.state.index + 1;\n        this.setState({ index });\n    };\n\n    onPrevClick = () => {\n        const index = this.state.index <= 0 ? data.length - 1 : this.state.index - 1;\n        this.setState({ index });\n    };\n\n    public render() {\n        return (\n            <div className={styles.slider}>\n                <div className={styles.arrowLeft} onClick={this.onNextClick} />\n                <div className={styles.arrowRight} onClick={this.onPrevClick} />\n\n                <div className={styles.content}>\n                    <Axises count={data[this.state.index].length} />\n\n                    {data[this.state.index].map((item, index) => (\n                        <Bar key={index} percent={item} />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Slider } from './slider/slider';\nimport './app.scss';\n\nconst App = () => (\n  <div className=\"app\">\n    <Slider />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}